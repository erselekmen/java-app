---
# Disable swap
- name: Disable swap
  import_tasks: 0010-swapoff.yml
  when:
    - not dns_late
    - kubelet_fail_swap_on

- name: Set facts
  import_tasks: 0020-set_facts.yml
  tags:
    - resolvconf
    - facts

- name: Check settings
  import_tasks: 0040-verify-settings.yml
  when:
    - not dns_late
  tags:
    - asserts

- name: Create directories
  import_tasks: 0050-create_directories.yml
  when:
    - not dns_late

- name: Apply resolvconf settings
  import_tasks: 0060-resolvconf.yml
  when:
    - dns_mode != 'none'
    - resolvconf_mode == 'host_resolvconf'
    - systemd_resolved_enabled.rc != 0
    - networkmanager_enabled.rc != 0
  tags:
    - bootstrap-os
    - resolvconf

- name: Apply systemd-resolved settings
  import_tasks: 0061-systemd-resolved.yml
  when:
    - dns_mode != 'none'
    - resolvconf_mode == 'host_resolvconf'
    - systemd_resolved_enabled.rc == 0
  tags:
    - bootstrap-os
    - resolvconf

- name: Apply networkmanager unmanaged devices settings
  import_tasks: 0062-networkmanager-unmanaged-devices.yml
  when:
    - networkmanager_enabled.rc == 0
  tags:
    - bootstrap-os

- name: Apply networkmanager DNS settings
  import_tasks: 0063-networkmanager-dns.yml
  when:
    - dns_mode != 'none'
    - resolvconf_mode == 'host_resolvconf'
    - networkmanager_enabled.rc == 0
  tags:
    - bootstrap-os
    - resolvconf

- name: Install required system packages
  import_tasks: 0070-system-packages.yml
  when:
    - not dns_late
  tags:
    - bootstrap-os

- name: Apply system configurations
  import_tasks: 0080-system-configurations.yml
  when:
    - not dns_late
  tags:
    - bootstrap-os

- name: Configure NTP
  import_tasks: 0081-ntp-configurations.yml
  when:
    - not dns_late
    - ntp_enabled
  tags:
    - bootstrap-os

- name: Configure /etc/hosts
  import_tasks: 0090-etchosts.yml
  tags:
    - bootstrap-os
    - etchosts

- name: Configure dhclient
  import_tasks: 0100-dhclient-hooks.yml
  when:
    - dns_mode != 'none'
    - resolvconf_mode == 'host_resolvconf'
    - dhclientconffile is defined
    - not ansible_os_family in ["Flatcar", "Flatcar Container Linux by Kinvolk"]
  tags:
    - bootstrap-os
    - resolvconf

- name: Configure dhclient dhclient hooks
  import_tasks: 0110-dhclient-hooks-undo.yml
  when:
    - dns_mode != 'none'
    - resolvconf_mode != 'host_resolvconf'
    - dhclientconffile is defined
    - not ansible_os_family in ["Flatcar", "Flatcar Container Linux by Kinvolk"]
  tags:
    - bootstrap-os
    - resolvconf

# We need to make sure the network is restarted early enough so that docker can later pick up the correct system
# nameservers and search domains
- name: Flush handlers
  meta: flush_handlers

- name: Check if we are running inside a Azure VM
  stat:
    path: /var/lib/waagent/
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: azure_check
  when:
    - not dns_late
  tags:
    - bootstrap-os

- name: Grow partition on azure CentOS
  import_tasks: 0120-growpart-azure-centos-7.yml
  when:
    - not dns_late
    - azure_check.stat.exists
    - ansible_os_family == "RedHat"
    - growpart_azure_enabled
  tags:
    - bootstrap-os

- name: Run calico checks
  include_role:
    name: network_plugin/calico
    tasks_from: check
  when:
    - kube_network_plugin == 'calico'
    - not ignore_assert_errors

- name: Remove existing Kubernetes repo for Amazon Linux 2
  file:
    path: /etc/yum.repos.d/kubernetes.repo
    state: absent
  when: ansible_distribution == "Amazon"

- name: Add Kubernetes community-owned yum repo for Amazon Linux 2
  copy:
    content: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
      enabled=1
      gpgcheck=1
      gpgkey=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key
      exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
    dest: /etc/yum.repos.d/kubernetes.repo
  when: ansible_distribution == "Amazon"

- name: Clean up yum cache
  command: yum clean all
  when: ansible_distribution == "Amazon"

- name: Make cache
  command: yum makecache
  when: ansible_distribution == "Amazon"

- name: Install Kubernetes packages on Amazon Linux 2 via yum
  yum:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
  when: ansible_distribution == "Amazon"

- name: Create keyrings directory if not exists
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  when: ansible_distribution == "Debian"

- name: Download public signing key for Kubernetes packages
  shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  when: ansible_distribution == "Debian"

- name: Add Kubernetes community-owned apt repo
  shell: echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
  when: ansible_distribution == "Debian"

- name: Replace the apt repository definition for Debian
  lineinfile:
    path: /etc/apt/sources.list
    regexp: '^deb http://deb.debian.org/debian buster-backports main$'
    line: 'deb http://cdn-aws.archive.debian.org/debian buster main'
    state: present
  when: ansible_distribution == "Debian"

- name: Add additional repositories for Debian
  lineinfile:
    path: /etc/apt/sources.list.d/official-repos.list
    create: yes
    line: "{{ item }}"
  with_items:
    - 'deb http://cdn-aws.archive.debian.org/debian buster main'
    - 'deb-src http://cdn-aws.archive.debian.org/debian buster main'
    - 'deb http://security.debian.org/debian-security buster/updates main'
    - 'deb-src http://security.debian.org/debian-security buster/updates main'
    - 'deb http://cdn-aws.archive.debian.org/debian buster-updates main'
    - 'deb-src http://cdn-aws.archive.debian.org/debian buster-updates main'
  when: ansible_distribution == "Debian"

- name: Update apt package index
  apt:
    update_cache: yes
  when: ansible_distribution == "Debian"
