name: Java App Build & Deployment Pipeline

on:
  push:
    branches:
      - kubespray

env:
  AWS_REGION: eu-central-1
  ECR_REGISTRY: 729691315449.dkr.ecr.eu-central-1.amazonaws.com
  ECR_REPOSITORY: java-app-img
  EKS_CLUSTER: java-app-cluster
  IMAGE_TAG: $GITHUB_SHA

jobs:
  build-and-push:
    name: build & push java app docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin 729691315449.dkr.ecr.eu-central-1.amazonaws.com/java-app-img

      - name: build & push java app docker image
        id: build-image
        run: |
          docker buildx build --platform linux/amd64 \
            --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
            --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
            --push .

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Create dev namespace
        run: |
          kubectl create namespace dev

      - name: Deploy NLB Service
        run: |
          kubectl apply -f k8s/nlb-service.yaml
          echo "nlb-service manifest deployed, waiting for nlb to be provisioned..."
          sleep 60  

      - name: Get NLB DNS Name
        id: nlb
        run: |
          NLB_DNS_NAME=$(kubectl get svc java-app-service -n dev -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "NLB_DNS_NAME=${NLB_DNS_NAME}" >> $GITHUB_ENV

      - name: Update Ingress Manifest
        run: |
          sed -i "s/<NLB-DNS-NAME>/${{ env.NLB_DNS_NAME }}/g" k8s/ingress.yaml

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml

      - name: Deploy Remaining Manifests to EKS
        run: |
          kubectl apply -f k8s/
          kubectl set image deployment/java-app java-app-img=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} -n dev
